{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZLILDANIELPC\\\\Desktop\\\\zlil_shared_dir\\\\whatsApp - serg\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Messages } from './Messages';\nimport { Chats } from './Chats';\nimport { Pane, Panes } from './Panes';\nimport { MessageForm } from './MessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  let [chats, setChats] = useState([]);\n  let [chatId, setChatId] = useState(null);\n  let [selectedId, setSelectedId] = useState(null);\n  let [messages, setMessages] = useState([]);\n  let [lastPoll, setLastPoll] = useState(Date.now());\n  useEffect(loadChat, []);\n  useEffect(loadMessages, [chatId, lastPoll]);\n  useEffect(startTimer, [lastPoll]);\n  useEffect(() => {\n    import('./data/chats.js').then(module => {\n      let chats = module.chats;\n      setChats(chats);\n      setSelectedId(chats[0].id);\n    });\n  }, []); // useEffect(() => {\n  //   fetch('https://jsonplaceholder.typicode.com/posts')\n  //     .then(res => res.json())\n  //     .then((posts) => setPosts(posts))\n  // }, []);\n\n  useEffect(() => {\n    if (!selectedId) {\n      return;\n    }\n\n    import(`./data/messages_${selectedId}.js`).then(module => {\n      let messages = module.messages;\n      setMessages(addFakeMessage(messages));\n    });\n  }, [selectedId, lastPoll]); //       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\n  //       .then(res => res.json())\n  //       .then((comments) => setComments(comments))\n  //   }, [selectedId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLastPoll(Date.now());\n    }, 6000);\n  }, [lastPoll]);\n  let selectedChat = chats.find(p => p.id === selectedId);\n  return /*#__PURE__*/_jsxDEV(Panes, {\n    children: [/*#__PURE__*/_jsxDEV(Pane, {\n      width: '35%',\n      minWidth: '300px',\n      header: `All Chats (lastPoll: ${lastPoll})`,\n      body: /*#__PURE__*/_jsxDEV(Chats, {\n        chats: chats,\n        onSelectChat: setSelectedId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pane, {\n      width: '65%',\n      header: `${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')} (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id})`,\n      body: /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this),\n      footer: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onNewMessage,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: 'newMessage'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this),\n      lastScroll: lastPoll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n}\n\n_s(App, \"nn9Lj+nffVmU15HW9DDG4dWrdHI=\");\n\n_c = App;\n\nfunction onNewMessage(e, chatId) {\n  e.preventDefault();\n  fetch(`/post/chats/${chatId}/message`).then(res => {\n    let newMessage = {\n      body: e.target.newMessage.value,\n      user: {\n        name: 'zlil yoffe'\n      },\n      chatId\n    };\n    console.log(`sending: ${JSON.stringify(newMessage)}`);\n    setLastPoll(Date.now());\n  });\n}\n\nfunction addFakeMessage(messages) {\n  let messageBeforeLast = messages[messages.length - 2];\n  let newMessage = { ...messageBeforeLast,\n    id: Date.now()\n  };\n  messages.push(newMessage);\n  return messages;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ZLILDANIELPC/Desktop/zlil_shared_dir/whatsApp - serg/src/App.jsx"],"names":["React","useEffect","useState","Messages","Chats","Pane","Panes","MessageForm","App","chats","setChats","chatId","setChatId","selectedId","setSelectedId","messages","setMessages","lastPoll","setLastPoll","Date","now","loadChat","loadMessages","startTimer","then","module","id","addFakeMessage","setTimeout","selectedChat","find","p","users","map","user","name","join","onNewMessage","e","preventDefault","fetch","res","newMessage","body","target","value","console","log","JSON","stringify","messageBeforeLast","length","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Messages } from './Messages';\r\nimport { Chats } from './Chats'; \r\nimport { Pane, Panes } from './Panes';\r\nimport { MessageForm } from './MessageForm';\r\n\r\n\r\nexport function App() {\r\n    let [chats, setChats] = useState([]);\r\n    let [chatId, setChatId] = useState(null);\r\n    let [selectedId, setSelectedId] = useState(null);\r\n    let [messages, setMessages] = useState([]);\r\n    let [lastPoll, setLastPoll] = useState(Date.now());\r\n\r\n    useEffect (loadChat, []);\r\n    useEffect (loadMessages, [chatId, lastPoll]);\r\n    useEffect (startTimer, [lastPoll]);\r\n\r\n  \r\nuseEffect(() => {\r\n    import('./data/chats.js')\r\n        .then(module => {\r\n            let chats = module.chats;\r\n            setChats(chats);\r\n            setSelectedId(chats[0].id);\r\n        });\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //   fetch('https://jsonplaceholder.typicode.com/posts')\r\n    //     .then(res => res.json())\r\n    //     .then((posts) => setPosts(posts))\r\n    // }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!selectedId) {\r\n        return;\r\n      }\r\n      import(`./data/messages_${selectedId}.js`)\r\n        .then((module) => {\r\n          let messages = module.messages;\r\n          setMessages(addFakeMessage(messages));\r\n        })\r\n    }, [selectedId, lastPoll]);\r\n//       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\r\n//       .then(res => res.json())\r\n//       .then((comments) => setComments(comments))\r\n//   }, [selectedId]);\r\n\r\nuseEffect(() => {\r\n    setTimeout(() => {\r\n        setLastPoll(Date.now());\r\n    }, 6000);\r\n}, [lastPoll]);\r\n    \r\n  let selectedChat = chats.find((p) => p.id === selectedId);\r\n  \r\n    return <Panes>\r\n        <Pane width={'35%'} minWidth={'300px'}\r\n         header={`All Chats (lastPoll: ${lastPoll})`}\r\n         body={<Chats chats={chats} onSelectChat={setSelectedId}></Chats>}>\r\n      </Pane>\r\n      <Pane width={'65%'}\r\n      header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n      body={<Messages messages={messages}></Messages>}\r\n      footer={<form onSubmit={onNewMessage}>\r\n          <input id={'newMessage'}></input>\r\n      </form>}\r\n      lastScroll={lastPoll}>\r\n      </Pane>\r\n    </Panes>;\r\n  }\r\n\r\n  function onNewMessage(e, chatId){\r\n    e.preventDefault();\r\n    fetch(`/post/chats/${chatId}/message`)\r\n      .then(res => {\r\n        let newMessage = {\r\n          body: e.target.newMessage.value,\r\n          user: {name: 'zlil yoffe'},\r\n          chatId\r\n        };\r\n        console.log(`sending: ${JSON.stringify(newMessage)}`);\r\n        setLastPoll(Date.now());\r\n      });\r\n  }\r\n  \r\n  function addFakeMessage(messages) {\r\n    let messageBeforeLast = messages[messages.length - 2];\r\n    let newMessage = {...messageBeforeLast, id: Date.now()};\r\n    messages.push(newMessage);\r\n    return messages;\r\n  }"]},"metadata":{},"sourceType":"module"}