{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZLILDANIELPC\\\\Desktop\\\\zlil_shared_dir\\\\whatsApp - serg\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Messages } from './Messages';\nimport { Pane, Panes } from './Panes';\nimport { Chats } from './Chats';\nimport { MessageForm } from './MessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MY_USER_ID = '60bfaf01d6c5f547fc147cca';\n\nlet get = route => fetch(`http://localhost:8080/api/${route}`).then(res => res.json());\n\nexport function App() {\n  _s();\n\n  let [chats, setChats] = useState([]);\n  let [chatId, setChatId] = useState(null); //let [selectedId, setSelectedId] = useState(null);\n\n  let [messages, setMessages] = useState([]);\n  let [lastPoll, setLastPoll] = useState(Date.now());\n  let [myUser, setMyUser] = useState({});\n  let [friends, setFriends] = useState([]);\n  let [usersContext, setUsersContext] = useState({\n    myUser: {},\n    allUsers: {}\n  });\n  let timer = useRef(null);\n  useEffect(loadMyUser, []);\n  useEffect(loadMyFriends, [myUser === null || myUser === void 0 ? void 0 : myUser._id]);\n  useEffect(updateUsersContext, [myUser, friends]);\n  useEffect(loadChats, []);\n  useEffect(loadAllUsers, []);\n  useEffect(loadMessages, [chatId, lastPoll]); // useEffect(startTimer, [lastPoll]);\n\n  let selectedChat = chats.find(chat => chat._id === chatId);\n\n  function loadAllUsers() {\n    // GET request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/api/users').then(response => response.json()).then(users => console.log(users)).catch(err => console.log(\"eror\" + err));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Panes, {\n    children: [/*#__PURE__*/_jsxDEV(Pane, {\n      width: '35%',\n      minWidth: '300px',\n      header: `All Chats (lastPoll: ${lastPoll})`,\n      header: `User: ${myUser.firstName} ${myUser.lastName} (lastPoll: ${lastPoll})`,\n      body: /*#__PURE__*/_jsxDEV(Chats, {\n        chats: chats,\n        onSelectChat: setChatId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pane, {\n      width: '65%',\n      header: `${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')} (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id})`,\n      header: `Chat (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id}): ${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')}`,\n      body: /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this),\n      footer: /*#__PURE__*/_jsxDEV(MessageForm, {\n        onNewMessage: onNewMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this),\n      lastScroll: lastPoll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n\n  function loadMyUser() {\n    const USER = '60bfaf01d6c5f547fc147cca';\n    fetch(`http://localhost:8080/api/users/${USER}`).then(res => res.json()).then(user => {\n      setMyUser(user);\n    });\n  }\n\n  ; // function loadMyUser() {\n  //   import('./data/users_me')\n  //     .then(module => {\n  //       let user = module.user;\n  //       setMyUser(user);\n  //     });\n  // }\n\n  function onNewMessage(e, chatId) {\n    e.preventDefault();\n    fetch(`/post/chats/${chatId}/message`).then(res => {\n      let newMessage = {\n        body: e.target.newMessage.value,\n        user: {\n          name: 'zlil yoffe'\n        },\n        chatId\n      };\n      console.log(`sending: ${JSON.stringify(newMessage)}`);\n      setLastPoll(Date.now());\n    });\n  }\n\n  function loadChats() {\n    get('chats').then(chats => {\n      setChats(chats);\n      setChatsId(chats[0]._id);\n    });\n  } // function loadChats() {\n  //   import('./data/chats.js')\n  //     .then(module => {\n  //       let chats = module.chats;\n  //       setChats(chats);\n  //       setChatId(chats[0].id);\n  //     });\n  // }\n\n\n  function loadMessages() {\n    if (!chatId) {\n      return;\n    }\n\n    get(`chats/${chatId}/messages`).then(messages => {\n      setMessages(messages);\n    });\n  }\n\n  function startTimer() {\n    clearTimeout(timer.current);\n    timer.current = setTimeout(() => {\n      setLastPoll(Date.now());\n    }, 5000);\n  }\n} // function addFakeMessage(messages) {\n//   let messageBeforeLast = messages[messages.length - 2];\n//   let newMessage = {...messageBeforeLast, id: Date.now()};\n//   messages.push(newMessage);\n//   return messages;\n// }\n\n/*\r\n    useEffect(() => {\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    import(`./data/messages_${selectedId}.js`)\r\n      .then((module) => {\r\n        let messages = module.messages;\r\n        setMessages(addFakeMessage(messages));\r\n      })\r\n  }, [selectedId, lastPoll]);\r\n//       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\r\n//       .then(res => res.json())\r\n//       .then((comments) => setComments(comments))\r\n//   }, [selectedId]);\r\nuseEffect(() => {\r\n  setTimeout(() => {\r\n      setLastPoll(Date.now());\r\n  }, 6000);\r\n}, [lastPoll]);\r\n  \r\nlet selectedChat = chats.find((p) => p.id === selectedId);\r\n\r\n  return <Panes>\r\n      <Pane width={'35%'} minWidth={'300px'}\r\n       header={`All Chats (lastPoll: ${lastPoll})`}\r\n       body={<Chats chats={chats} onSelectChat={setSelectedId}></Chats>}>\r\n    </Pane>\r\n    <Pane width={'65%'}\r\n    header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n    body={<Messages messages={messages}></Messages>}\r\n    footer={<form onSubmit={onNewMessage}>\r\n        <input id={'newMessage'}></input>\r\n    </form>}\r\n    lastScroll={lastPoll}>\r\n    </Pane>\r\n  </Panes>;\r\n}\r\n\r\nfunction addFakeMessage(messages) {\r\n  let messageBeforeLast = messages[messages.length - 2];\r\n  let newMessage = {...messageBeforeLast, id: Date.now()};\r\n  messages.push(newMessage);\r\n  return messages;\r\n}\r\n  useEffect(() => {\r\n  import('./data/chats.js')\r\n      .then(module => {\r\n          let chats = module.chats;\r\n          setChats(chats);\r\n          setSelectedId(chats[0].id);\r\n      });\r\n  }, []);\r\n    useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(res => res.json())\r\n      .then((posts) => setPosts(posts))\r\n  }, []);\r\n    */\n\n_s(App, \"EDtnQKCxu+9K+sfH9jlpPMBvVA8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ZLILDANIELPC/Desktop/zlil_shared_dir/whatsApp - serg/src/App.jsx"],"names":["React","useEffect","useRef","useState","Messages","Pane","Panes","Chats","MessageForm","MY_USER_ID","get","route","fetch","then","res","json","App","chats","setChats","chatId","setChatId","messages","setMessages","lastPoll","setLastPoll","Date","now","myUser","setMyUser","friends","setFriends","usersContext","setUsersContext","allUsers","timer","loadMyUser","loadMyFriends","_id","updateUsersContext","loadChats","loadAllUsers","loadMessages","selectedChat","find","chat","response","users","console","log","catch","err","firstName","lastName","map","user","name","join","id","onNewMessage","USER","e","preventDefault","newMessage","body","target","value","JSON","stringify","setChatsId","startTimer","clearTimeout","current","setTimeout"],"mappings":"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K,CAAC,CAAD,CAAL,CAASoB,GAAV,CAAV;AACD,KAHD;AAID,GAnFiB,CAqFlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAASI,YAAT,GAAwB;AACtB,QAAI,CAACtB,MAAL,EAAa;AACX;AACD;;AACDT,IAAAA,GAAG,CAAE,SAAQS,MAAO,WAAjB,CAAH,CACGN,IADH,CACSQ,QAAD,IAAc;AAClBC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACD,KAHH;AAID;;AACD,WAASgD,UAAT,GAAsB;AACpBC,IAAAA,YAAY,CAACpC,KAAK,CAACqC,OAAP,CAAZ;AACArC,IAAAA,KAAK,CAACqC,OAAN,GAAgBC,UAAU,CAAC,MAAM;AAC/BhD,MAAAA,WAAW,CAACC,IAAI,CAACC,GAAL,EAAD,CAAX;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGD;AACF,C,CACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA/KgBV,G;;KAAAA,G","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Messages } from './Messages';\r\nimport { Pane, Panes } from './Panes';\r\nimport { Chats } from './Chats';\r\nimport { MessageForm } from './MessageForm';\r\n\r\nconst MY_USER_ID = '60bfaf01d6c5f547fc147cca';\r\nlet get = (route) => fetch(`http://localhost:8080/api/${route}`).then(res => res.json())\r\n\r\nexport function App() {\r\n    let [chats, setChats] = useState([]);\r\n    let [chatId, setChatId] = useState(null);\r\n    //let [selectedId, setSelectedId] = useState(null);\r\n    let [messages, setMessages] = useState([]);\r\n    let [lastPoll, setLastPoll] = useState(Date.now());\r\n    let [myUser, setMyUser] = useState({});\r\n    let [friends, setFriends] = useState([]);\r\n    let [usersContext, setUsersContext] = useState({\r\n      myUser: {},\r\n      allUsers: {}\r\n    });\r\n    let timer = useRef(null);\r\n\r\n    useEffect(loadMyUser, []);\r\n    useEffect(loadMyFriends, [myUser?._id]);\r\n    useEffect(updateUsersContext, [myUser, friends]);\r\n    useEffect(loadChats, []);\r\n    useEffect(loadAllUsers, []);\r\n    useEffect(loadMessages, [chatId, lastPoll]);\r\n    // useEffect(startTimer, [lastPoll]);\r\n\r\n    let selectedChat = chats.find((chat) => chat._id === chatId);\r\n\r\n    function loadAllUsers() {\r\n      // GET request using fetch inside useEffect React hook\r\n      fetch('http://localhost:8080/api/users')\r\n          .then((response) => response.json())\r\n          .then((users) => console.log(users))\r\n          .catch((err) => console.log(\"eror\" + err));\r\n    };\r\n\r\n    return <Panes>\r\n      <Pane width={'35%'} minWidth={'300px'}\r\n        header={`All Chats (lastPoll: ${lastPoll})`}\r\n        header={`User: ${myUser.firstName} ${myUser.lastName} (lastPoll: ${lastPoll})`}\r\n        body={<Chats chats={chats} onSelectChat={setChatId}></Chats>}>\r\n      </Pane>\r\n      <Pane width={'65%'}\r\n        header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n        header={`Chat (${selectedChat?.id}): ${selectedChat?.users.map(user => user.name).join(', ')}`}\r\n        body={<Messages messages={messages}></Messages>}\r\n        footer={<MessageForm onNewMessage={onNewMessage}></MessageForm>}\r\n        lastScroll={lastPoll}>\r\n      </Pane>\r\n  </Panes>;\r\n\r\n  function loadMyUser(){\r\n    const USER = '60bfaf01d6c5f547fc147cca';\r\n    fetch(`http://localhost:8080/api/users/${USER}`)\r\n    .then(res => res.json())\r\n    .then(user =>{\r\n      setMyUser(user)\r\n    })\r\n  };\r\n    \r\n    // function loadMyUser() {\r\n    //   import('./data/users_me')\r\n    //     .then(module => {\r\n    //       let user = module.user;\r\n    //       setMyUser(user);\r\n    //     });\r\n    // }\r\n\r\n    function onNewMessage(e, chatId){\r\n      e.preventDefault();\r\n      fetch(`/post/chats/${chatId}/message`)\r\n        .then(res => {\r\n          let newMessage = {\r\n            body: e.target.newMessage.value,\r\n            user: {name: 'zlil yoffe'},\r\n            chatId\r\n          };\r\n          console.log(`sending: ${JSON.stringify(newMessage)}`);\r\n          setLastPoll(Date.now());\r\n        });\r\n    }\r\n\r\n    function loadChats(){\r\n      get ('chats').then(chats => {\r\n        setChats(chats);\r\n        setChatsId(chats[0]._id);\r\n      });\r\n    }\r\n\r\n    // function loadChats() {\r\n    //   import('./data/chats.js')\r\n    //     .then(module => {\r\n    //       let chats = module.chats;\r\n    //       setChats(chats);\r\n    //       setChatId(chats[0].id);\r\n    //     });\r\n    // }\r\n\r\n    function loadMessages() {\r\n      if (!chatId) {\r\n        return;\r\n      }\r\n      get(`chats/${chatId}/messages`)\r\n        .then((messages) => {\r\n          setMessages(messages);\r\n        })\r\n    }\r\n    function startTimer() {\r\n      clearTimeout(timer.current);\r\n      timer.current = setTimeout(() => {\r\n        setLastPoll(Date.now());\r\n      }, 5000);\r\n    }\r\n  }\r\n  // function addFakeMessage(messages) {\r\n  //   let messageBeforeLast = messages[messages.length - 2];\r\n  //   let newMessage = {...messageBeforeLast, id: Date.now()};\r\n  //   messages.push(newMessage);\r\n  //   return messages;\r\n  // }\r\n\r\n  /*\r\n\r\n    useEffect(() => {\r\n      if (!selectedId) {\r\n        return;\r\n      }\r\n      import(`./data/messages_${selectedId}.js`)\r\n        .then((module) => {\r\n          let messages = module.messages;\r\n          setMessages(addFakeMessage(messages));\r\n        })\r\n    }, [selectedId, lastPoll]);\r\n//       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\r\n//       .then(res => res.json())\r\n//       .then((comments) => setComments(comments))\r\n//   }, [selectedId]);\r\n\r\nuseEffect(() => {\r\n    setTimeout(() => {\r\n        setLastPoll(Date.now());\r\n    }, 6000);\r\n}, [lastPoll]);\r\n    \r\n  let selectedChat = chats.find((p) => p.id === selectedId);\r\n  \r\n    return <Panes>\r\n        <Pane width={'35%'} minWidth={'300px'}\r\n         header={`All Chats (lastPoll: ${lastPoll})`}\r\n         body={<Chats chats={chats} onSelectChat={setSelectedId}></Chats>}>\r\n      </Pane>\r\n      <Pane width={'65%'}\r\n      header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n      body={<Messages messages={messages}></Messages>}\r\n      footer={<form onSubmit={onNewMessage}>\r\n          <input id={'newMessage'}></input>\r\n      </form>}\r\n      lastScroll={lastPoll}>\r\n      </Pane>\r\n    </Panes>;\r\n  }\r\n  \r\n  function addFakeMessage(messages) {\r\n    let messageBeforeLast = messages[messages.length - 2];\r\n    let newMessage = {...messageBeforeLast, id: Date.now()};\r\n    messages.push(newMessage);\r\n    return messages;\r\n  }\r\n\r\n  useEffect(() => {\r\n    import('./data/chats.js')\r\n        .then(module => {\r\n            let chats = module.chats;\r\n            setChats(chats);\r\n            setSelectedId(chats[0].id);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then((posts) => setPosts(posts))\r\n    }, []);\r\n\r\n    */"]},"metadata":{},"sourceType":"module"}