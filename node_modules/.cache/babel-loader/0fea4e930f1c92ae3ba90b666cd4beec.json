{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZLILDANIELPC\\\\Desktop\\\\zlil_shared_dir\\\\whatsApp - serg\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Messages } from './Messages';\nimport { Pane, Panes } from './Panes';\nimport { Chats } from './Chats';\nimport { MessageForm } from './MessageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  let [chats, setChats] = useState([]);\n  let [chatId, setChatId] = useState(null); //let [selectedId, setSelectedId] = useState(null);\n\n  let [messages, setMessages] = useState([]);\n  let [lastPoll, setLastPoll] = useState(Date.now());\n  let [myUser, setMyUser] = useState({});\n  let timer = useRef(null);\n  useEffect(loadMyUser, []);\n  useEffect(loadChats, []);\n  useEffect(loadAllUsers, []);\n  useEffect(loadMessages, [chatId, lastPoll]);\n  useEffect(startTimer, [lastPoll]);\n  let selectedChat = chats.find(p => p.id === chatId);\n\n  function loadAllUsers() {\n    // GET request using fetch inside useEffect React hook\n    fetch('http://localhost:8080/api/users').then(response => response.json()).then(users => console.log(users)).catch(err => console.log(\"eror\" + err));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Panes, {\n    children: [/*#__PURE__*/_jsxDEV(Pane, {\n      width: '35%',\n      minWidth: '300px',\n      header: `All Chats (lastPoll: ${lastPoll})`,\n      header: `User: ${myUser.firstName} ${myUser.lastName} (lastPoll: ${lastPoll})`,\n      body: /*#__PURE__*/_jsxDEV(Chats, {\n        chats: chats,\n        onSelectChat: setChatId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pane, {\n      width: '65%',\n      header: `${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')} (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id})`,\n      header: `Chat (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id}): ${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')}`,\n      body: /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this),\n      footer: /*#__PURE__*/_jsxDEV(MessageForm, {\n        onNewMessage: onNewMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this),\n      lastScroll: lastPoll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n\n  function loadMyUser() {\n    const USER = '60bfaf01d6c5f547fc147cca';\n    fetch(`http://localhost:8080/api/users/${USER}`).then(res => res.json()).then(user => {\n      setMyUser(user);\n    });\n  }\n\n  ; // function loadMyUser() {\n  //   import('./data/users_me')\n  //     .then(module => {\n  //       let user = module.user;\n  //       setMyUser(user);\n  //     });\n  // }\n\n  function onNewMessage(e, chatId) {\n    e.preventDefault();\n    fetch(`/post/chats/${chatId}/message`).then(res => {\n      let newMessage = {\n        body: e.target.newMessage.value,\n        user: {\n          name: 'zlil yoffe'\n        },\n        chatId\n      };\n      console.log(`sending: ${JSON.stringify(newMessage)}`);\n      setLastPoll(Date.now());\n    });\n  }\n\n  function loadChats() {\n    import('./data/chats.js').then(module => {\n      let chats = module.chats;\n      setChats(chats);\n      setChatId(chats[0].id);\n    });\n  }\n\n  function loadMessages() {\n    if (!chatId) {\n      return;\n    }\n\n    import(`./data/messages_${chatId}.js`).then(module => {\n      let messages = module.messages;\n      setMessages(addFakeMessage(messages));\n    });\n  }\n\n  function startTimer() {\n    clearTimeout(timer.current);\n    timer.current = setTimeout(() => {\n      setLastPoll(Date.now());\n    }, 5000);\n  }\n}\n\n_s(App, \"0j+6k9zhOB6Ye7znijkIaZxLyiU=\");\n\n_c = App;\n\nfunction addFakeMessage(messages) {\n  let messageBeforeLast = messages[messages.length - 2];\n  let newMessage = { ...messageBeforeLast,\n    id: Date.now()\n  };\n  messages.push(newMessage);\n  return messages;\n}\n/*\r\n    useEffect(() => {\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    import(`./data/messages_${selectedId}.js`)\r\n      .then((module) => {\r\n        let messages = module.messages;\r\n        setMessages(addFakeMessage(messages));\r\n      })\r\n  }, [selectedId, lastPoll]);\r\n//       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\r\n//       .then(res => res.json())\r\n//       .then((comments) => setComments(comments))\r\n//   }, [selectedId]);\r\nuseEffect(() => {\r\n  setTimeout(() => {\r\n      setLastPoll(Date.now());\r\n  }, 6000);\r\n}, [lastPoll]);\r\n  \r\nlet selectedChat = chats.find((p) => p.id === selectedId);\r\n\r\n  return <Panes>\r\n      <Pane width={'35%'} minWidth={'300px'}\r\n       header={`All Chats (lastPoll: ${lastPoll})`}\r\n       body={<Chats chats={chats} onSelectChat={setSelectedId}></Chats>}>\r\n    </Pane>\r\n    <Pane width={'65%'}\r\n    header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n    body={<Messages messages={messages}></Messages>}\r\n    footer={<form onSubmit={onNewMessage}>\r\n        <input id={'newMessage'}></input>\r\n    </form>}\r\n    lastScroll={lastPoll}>\r\n    </Pane>\r\n  </Panes>;\r\n}\r\n\r\nfunction addFakeMessage(messages) {\r\n  let messageBeforeLast = messages[messages.length - 2];\r\n  let newMessage = {...messageBeforeLast, id: Date.now()};\r\n  messages.push(newMessage);\r\n  return messages;\r\n}\r\n  useEffect(() => {\r\n  import('./data/chats.js')\r\n      .then(module => {\r\n          let chats = module.chats;\r\n          setChats(chats);\r\n          setSelectedId(chats[0].id);\r\n      });\r\n  }, []);\r\n    useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then(res => res.json())\r\n      .then((posts) => setPosts(posts))\r\n  }, []);\r\n    */\n\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ZLILDANIELPC/Desktop/zlil_shared_dir/whatsApp - serg/src/App.jsx"],"names":["React","useEffect","useRef","useState","Messages","Pane","Panes","Chats","MessageForm","App","chats","setChats","chatId","setChatId","messages","setMessages","lastPoll","setLastPoll","Date","now","myUser","setMyUser","timer","loadMyUser","loadChats","loadAllUsers","loadMessages","startTimer","selectedChat","find","p","id","fetch","then","response","json","users","console","log","catch","err","firstName","lastName","map","user","name","join","onNewMessage","USER","res","e","preventDefault","newMessage","body","target","value","JSON","stringify","module","addFakeMessage","clearTimeout","current","setTimeout","messageBeforeLast","length","push"],"mappings":"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AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGD;AACF;;GAhGaV,G;;KAAAA,G;;AAiGd,SAASkD,cAAT,CAAwB7C,QAAxB,EAAkC;AAChC,MAAIiD,iBAAiB,GAAGjD,QAAQ,CAACA,QAAQ,CAACkD,MAAT,GAAkB,CAAnB,CAAhC;AACA,MAAIZ,UAAU,GAAG,EAAC,GAAGW,iBAAJ;AAAuBhC,IAAAA,EAAE,EAAEb,IAAI,CAACC,GAAL;AAA3B,GAAjB;AACAL,EAAAA,QAAQ,CAACmD,IAAT,CAAcb,UAAd;AACA,SAAOtC,QAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Messages } from './Messages';\r\nimport { Pane, Panes } from './Panes';\r\nimport { Chats } from './Chats';\r\nimport { MessageForm } from './MessageForm';\r\n\r\n\r\nexport function App() {\r\n    let [chats, setChats] = useState([]);\r\n    let [chatId, setChatId] = useState(null);\r\n    //let [selectedId, setSelectedId] = useState(null);\r\n    let [messages, setMessages] = useState([]);\r\n    let [lastPoll, setLastPoll] = useState(Date.now());\r\n    let [myUser, setMyUser] = useState({});\r\n    let timer = useRef(null);\r\n\r\n    useEffect(loadMyUser, []);\r\n    useEffect(loadChats, []);\r\n    useEffect(loadAllUsers, []);\r\n    useEffect(loadMessages, [chatId, lastPoll]);\r\n    useEffect(startTimer, [lastPoll]);\r\n\r\n    let selectedChat = chats.find((p) => p.id === chatId);\r\n\r\n    function loadAllUsers() {\r\n      // GET request using fetch inside useEffect React hook\r\n      fetch('http://localhost:8080/api/users')\r\n          .then((response) => response.json())\r\n          .then((users) => console.log(users))\r\n          .catch((err) => console.log(\"eror\" + err));\r\n    };\r\n\r\n    return <Panes>\r\n      <Pane width={'35%'} minWidth={'300px'}\r\n        header={`All Chats (lastPoll: ${lastPoll})`}\r\n        header={`User: ${myUser.firstName} ${myUser.lastName} (lastPoll: ${lastPoll})`}\r\n        body={<Chats chats={chats} onSelectChat={setChatId}></Chats>}>\r\n      </Pane>\r\n      <Pane width={'65%'}\r\n        header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n        header={`Chat (${selectedChat?.id}): ${selectedChat?.users.map(user => user.name).join(', ')}`}\r\n        body={<Messages messages={messages}></Messages>}\r\n        footer={<MessageForm onNewMessage={onNewMessage}></MessageForm>}\r\n        lastScroll={lastPoll}>\r\n      </Pane>\r\n  </Panes>;\r\n\r\n  function loadMyUser(){\r\n    const USER = '60bfaf01d6c5f547fc147cca';\r\n    fetch(`http://localhost:8080/api/users/${USER}`)\r\n    .then(res => res.json())\r\n    .then(user =>{\r\n      setMyUser(user)\r\n    })\r\n  };\r\n    \r\n    // function loadMyUser() {\r\n    //   import('./data/users_me')\r\n    //     .then(module => {\r\n    //       let user = module.user;\r\n    //       setMyUser(user);\r\n    //     });\r\n    // }\r\n\r\n    function onNewMessage(e, chatId){\r\n      e.preventDefault();\r\n      fetch(`/post/chats/${chatId}/message`)\r\n        .then(res => {\r\n          let newMessage = {\r\n            body: e.target.newMessage.value,\r\n            user: {name: 'zlil yoffe'},\r\n            chatId\r\n          };\r\n          console.log(`sending: ${JSON.stringify(newMessage)}`);\r\n          setLastPoll(Date.now());\r\n        });\r\n    }\r\n\r\n    function loadChats() {\r\n      import('./data/chats.js')\r\n        .then(module => {\r\n          let chats = module.chats;\r\n          setChats(chats);\r\n          setChatId(chats[0].id);\r\n        });\r\n    }\r\n\r\n    function loadMessages() {\r\n      if (!chatId) {\r\n        return;\r\n      }\r\n      import(`./data/messages_${chatId}.js`)\r\n        .then((module) => {\r\n          let messages = module.messages;\r\n          setMessages(addFakeMessage(messages));\r\n        })\r\n    }\r\n    function startTimer() {\r\n      clearTimeout(timer.current);\r\n      timer.current = setTimeout(() => {\r\n        setLastPoll(Date.now());\r\n      }, 5000);\r\n    }\r\n  }\r\n  function addFakeMessage(messages) {\r\n    let messageBeforeLast = messages[messages.length - 2];\r\n    let newMessage = {...messageBeforeLast, id: Date.now()};\r\n    messages.push(newMessage);\r\n    return messages;\r\n  }\r\n\r\n  /*\r\n\r\n    useEffect(() => {\r\n      if (!selectedId) {\r\n        return;\r\n      }\r\n      import(`./data/messages_${selectedId}.js`)\r\n        .then((module) => {\r\n          let messages = module.messages;\r\n          setMessages(addFakeMessage(messages));\r\n        })\r\n    }, [selectedId, lastPoll]);\r\n//       fetch(`https://jsonplaceholder.typicode.com/comments?postId=${selectedId}`)\r\n//       .then(res => res.json())\r\n//       .then((comments) => setComments(comments))\r\n//   }, [selectedId]);\r\n\r\nuseEffect(() => {\r\n    setTimeout(() => {\r\n        setLastPoll(Date.now());\r\n    }, 6000);\r\n}, [lastPoll]);\r\n    \r\n  let selectedChat = chats.find((p) => p.id === selectedId);\r\n  \r\n    return <Panes>\r\n        <Pane width={'35%'} minWidth={'300px'}\r\n         header={`All Chats (lastPoll: ${lastPoll})`}\r\n         body={<Chats chats={chats} onSelectChat={setSelectedId}></Chats>}>\r\n      </Pane>\r\n      <Pane width={'65%'}\r\n      header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\r\n      body={<Messages messages={messages}></Messages>}\r\n      footer={<form onSubmit={onNewMessage}>\r\n          <input id={'newMessage'}></input>\r\n      </form>}\r\n      lastScroll={lastPoll}>\r\n      </Pane>\r\n    </Panes>;\r\n  }\r\n  \r\n  function addFakeMessage(messages) {\r\n    let messageBeforeLast = messages[messages.length - 2];\r\n    let newMessage = {...messageBeforeLast, id: Date.now()};\r\n    messages.push(newMessage);\r\n    return messages;\r\n  }\r\n\r\n  useEffect(() => {\r\n    import('./data/chats.js')\r\n        .then(module => {\r\n            let chats = module.chats;\r\n            setChats(chats);\r\n            setSelectedId(chats[0].id);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then((posts) => setPosts(posts))\r\n    }, []);\r\n\r\n    */"]},"metadata":{},"sourceType":"module"}